/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Challenge}
 * @category Accounts
 * @category generated
 */
export type ChallengeArgs = {
  authority: web3.PublicKey
  id: string
  started: boolean
  finished: boolean
  admitCost: beet.bignum
  triesPerAdmit: number
  redeem: web3.PublicKey
  solving: number
  solutions: number[] /* size: 32 */[]
}
/**
 * Holds the data for the {@link Challenge} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Challenge implements ChallengeArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly id: string,
    readonly started: boolean,
    readonly finished: boolean,
    readonly admitCost: beet.bignum,
    readonly triesPerAdmit: number,
    readonly redeem: web3.PublicKey,
    readonly solving: number,
    readonly solutions: number[] /* size: 32 */[]
  ) {}

  /**
   * Creates a {@link Challenge} instance from the provided args.
   */
  static fromArgs(args: ChallengeArgs) {
    return new Challenge(
      args.authority,
      args.id,
      args.started,
      args.finished,
      args.admitCost,
      args.triesPerAdmit,
      args.redeem,
      args.solving,
      args.solutions
    )
  }

  /**
   * Deserializes the {@link Challenge} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Challenge, number] {
    return Challenge.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Challenge} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Challenge> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Challenge account at ${address}`)
    }
    return Challenge.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'FFFFaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, challengeBeet)
  }

  /**
   * Deserializes the {@link Challenge} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Challenge, number] {
    return challengeBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Challenge} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return challengeBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Challenge} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ChallengeArgs) {
    const instance = Challenge.fromArgs(args)
    return challengeBeet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Challenge} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ChallengeArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Challenge.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Challenge} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      id: this.id,
      started: this.started,
      finished: this.finished,
      admitCost: (() => {
        const x = <{ toNumber: () => number }>this.admitCost
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      triesPerAdmit: this.triesPerAdmit,
      redeem: this.redeem.toBase58(),
      solving: this.solving,
      solutions: this.solutions,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const challengeBeet = new beet.FixableBeetStruct<
  Challenge,
  ChallengeArgs
>(
  [
    ['authority', beetSolana.publicKey],
    ['id', beet.utf8String],
    ['started', beet.bool],
    ['finished', beet.bool],
    ['admitCost', beet.u64],
    ['triesPerAdmit', beet.u8],
    ['redeem', beetSolana.publicKey],
    ['solving', beet.u8],
    ['solutions', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  Challenge.fromArgs,
  'Challenge'
)
