/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddSolutions
 * @category generated
 */
export type AddSolutionsInstructionArgs = {
  id: string
  solutions: number[] /* size: 32 */[]
}
/**
 * @category Instructions
 * @category AddSolutions
 * @category generated
 */
export const AddSolutionsStruct = new beet.FixableBeetArgsStruct<
  AddSolutionsInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['id', beet.utf8String],
    ['solutions', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  'AddSolutionsInstructionArgs'
)
/**
 * Accounts required by the _AddSolutions_ instruction
 *
 * @property [_writable_, **signer**] payer pays for the transaction
 * @property [**signer**] creator challenge authority
 * @property [_writable_] challengePda PDA for the challenge
 * @category Instructions
 * @category AddSolutions
 * @category generated
 */
export type AddSolutionsInstructionAccounts = {
  payer: web3.PublicKey
  creator: web3.PublicKey
  challengePda: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const addSolutionsInstructionDiscriminator = 1

/**
 * Creates a _AddSolutions_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddSolutions
 * @category generated
 */
export function createAddSolutionsInstruction(
  accounts: AddSolutionsInstructionAccounts,
  args: AddSolutionsInstructionArgs,
  programId = new web3.PublicKey('FFFFaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = AddSolutionsStruct.serialize({
    instructionDiscriminator: addSolutionsInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.challengePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
