/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export type RedeemInstructionArgs = {
  solution: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export const RedeemStruct = new beet.BeetArgsStruct<
  RedeemInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['solution', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'RedeemInstructionArgs'
)
/**
 * Accounts required by the _Redeem_ instruction
 *
 * @property [_writable_, **signer**] payer pays for the transaction
 * @property [_writable_] challengePda PDA for the challenge
 * @property [**signer**] challenger challenger account which receives the redeemed token
 * @property [_writable_] challengerPda PDA for the challenger
 * @property [_writable_] redeem PDA of token to redeem for correct solution
 * @property [_writable_] redeemAta ATA for redeem PDA and challenger
 * @property [] associatedTokenProgram Associated Token Program
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export type RedeemInstructionAccounts = {
  payer: web3.PublicKey
  challengePda: web3.PublicKey
  challenger: web3.PublicKey
  challengerPda: web3.PublicKey
  redeem: web3.PublicKey
  redeemAta: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const redeemInstructionDiscriminator = 4

/**
 * Creates a _Redeem_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Redeem
 * @category generated
 */
export function createRedeemInstruction(
  accounts: RedeemInstructionAccounts,
  args: RedeemInstructionArgs,
  programId = new web3.PublicKey('FFFFaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')
) {
  const [data] = RedeemStruct.serialize({
    instructionDiscriminator: redeemInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.challengePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.challenger,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.challengerPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.redeem,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.redeemAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
